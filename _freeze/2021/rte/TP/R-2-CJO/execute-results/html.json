{
  "hash": "51a838e44bf0b7c06d7071246020a372",
  "result": {
    "markdown": "---\ntitle: \"2 - Correction des jours ouvrables\"\nsubtitle: |\n  Formation - Désaisonnalisation avec JDemetra+ et RJDemetra\n  ![](img/logo.png){width=1in}\nauthor: \"Alain Quartier-la-Tente\"\nformat: html\nlang: fr\nlanguage:\n title-block-author-single: Auteur\n---\n\n\n\n\n\n> L'objectif de ce TP est d'apprendre à créer des régresseurs jours ouvrables personnalisés, à les utiliser dans RJDemetra/JDemetra+ et à vérifier la qualité de la correction.\n\n::: {.callout-important}\n## Attention\nCe TP a été actualisé en 2022 pour prendre en compte les nouveautés liées à la version 3 de JDemetra+ et son implémentation en {{< fa brands r-project >}}. La fonction `td.f()` pour faire des tests de jours ouvrables résiduels est maintenant dans le package `rjd3modelling` et n'est plus dans le package `rjd3sa` (qui n'est donc plus utile pour ce TP).\n:::\n\n\nPour créer des régresseurs jours ouvrables personnalisés, deux solutions :\n\n1. Le faire depuis JDemetra+, en créant un calendrier personnalisé puis en exportant les régresseurs. Voir par exemple la documentation de JDemetra+ [ici](https://jdemetradocumentation.github.io/JDemetra-documentation/pages/case-studies/calendars-main.html) et [là](https://jdemetradocumentation.github.io/JDemetra-documentation/pages/case-studies/calendars-national.html).\n\n2. Créer le calendrier depuis R à l'aide du package [`rjd3modelling`](https://github.com/palatej/rjd3modelling) (qui dépend de [`rjd3toolkit`](https://github.com/palatej/rjd3toolkit)). Ces packages ne sont pas sur le CRAN, pour les installer on peut par exemple utiliser la fonction `remotes::install_github()` :\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Configurer si besoin le proxy\n# proxy <- \"proxy_a_definir\"\n# Sys.setenv(HTTPS_PROXY = proxy)\nremotes::install_github(\"palatej/rjd3toolkit\",\n                 INSTALL_opts = \"--no-multiarch\")\nremotes::install_github(\"palatej/rjd3modelling\",\n                 INSTALL_opts = \"--no-multiarch\")\n```\n:::\n\n\nDans ce TP, nous nous intéresserons uniquement à la seconde option. \nEn effet, le package R est plus flexible et permet de créer des régresseurs moins classiques que les *working days* et *trading days*. \n\nCet énoncé a été préparé avec la version 0.5.0 des packages  `rjd3toolkit` et `rjd3modelling`: dans les nouvelles versions, les noms des fonctions peuvent être différents. Pour installer cette version, vous pouvez utiliser le code suivante :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"palatej/rjd3toolkit@v0.5.0\")\nremotes::install_github(\"palatej/rjd3modelling@v0.5.0\")\n```\n:::\n\n\nSi besoin, ci-dessous un exemple de code pour récupérer vos données :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfichier <- \"../data/data_rte.xlsx\"\n# # Ou en téléchargeant le fichier depuis internet :\n# fichier <- tempfile(fileext = \"xlsx\")\n# url <- \"https://aqlt.github.io/formations/2021/rte/data/data_rte.xlsx\"\n# download.file(url, fichier)\ndata_rte <- readxl::read_excel(fichier)\ndate_deb <- 2006\ndata_rte <- ts(data_rte[,-1], start = date_deb,\n               frequency = 12)\n```\n:::\n\n\n\n# Création de régresseurs JO avec `rjd3modelling`\n\n## Création d'un calendrier \n\nPar défaut, les régresseurs jours ouvrables de JDemetra+ ne prennent pas en compte les spécificité calendaires des pays : on ne prend pas en compte les jours fériés. \nPour les prendre en compte, il faut créer son propre calendrier où l'on supposera qu'un jour férié de plus dans le mois a le même effet qu'un dimanche.\n\nUn nouveau calendrier avec la fonction `calendar.new()`\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rjd3modelling)\nfrenchCalendar <- calendar.new()\n```\n:::\n\nTrois fonctions peuvent être utilisées pour ajouter des jours fériés :\n\n1. `calendar.fixedday()` pour ajouter un jour férié qui tombe à date fixe. Par exemple, pour ajouter le 8 mai :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalendar.fixedday(frenchCalendar, month =  5,\n                  day = 8)\n```\n:::\n\n\n2. `calendar.easter()` pour ajouter un jour férié dont le jour dépend de Pâques : le paramètre `offset` permet de spécifier le nombre de jours avant (si négatif) ou après Pâques (si positif). Par exemple, pour ajouter la Pentecôte qui a lieu 60 jours après Pâques :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalendar.easter(frenchCalendar,\n                offset = 60)\n```\n:::\n\n\n3. `calendar.holiday()` qui permet d'ajouter des jours fériés par rapport à des dates déjà connues dans JDemetra+ (voir tableau ci-dessous). Comme pour la fonction `calendar.easter()`, le paramètre `offset` permet de spécifier la position du jour voulu par rapport rapport à la fête pré-spécifié (par défaut `offset = 0`, le jour férié coïncide avec le jour pré-spécifié). Par exemple, pour ajouter le nouvel an :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalendar.holiday(frenchCalendar, \"NEWYEAR\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper lightable-hover\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n<caption>Jours pré-spécifiés</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Event </th>\n   <th style=\"text-align:left;\"> Définition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> NEWYEAR </td>\n   <td style=\"text-align:left;\"> Fête fixe, 1er janvier. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> SHROVEMONDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, lundi avant le mecredi des cendres (48 jours avant pâques). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> SHROVETUESDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, mardi avant le mecredi des cendres (47 jours avant pâques). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ASHWEDNESDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, 46 jours avant Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> EASTER </td>\n   <td style=\"text-align:left;\"> Fête mobile, Pâques, varie entre le 22 mars et le 25 avril. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> MAUNDYTHURSDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, le jeudi avant Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> GOODFRIDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, le vendredi avant Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> EASTERMONDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, le lendemain de Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ASCENSION </td>\n   <td style=\"text-align:left;\"> Fête mobile, célébrée un jeudi, 40 jours après Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PENTECOST </td>\n   <td style=\"text-align:left;\"> Fête mobile, 50 jours après Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CORPUSCHRISTI </td>\n   <td style=\"text-align:left;\"> Fête mobile, 60 jours après Pâques. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WHITMONDAY </td>\n   <td style=\"text-align:left;\"> Fête mobile, le jour après la Pentecôte. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> MAYDAY </td>\n   <td style=\"text-align:left;\"> Fête fixe, 1er mai. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ASSUMPTION </td>\n   <td style=\"text-align:left;\"> Fête fixe, 15 août. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> HALLOWEEN </td>\n   <td style=\"text-align:left;\"> Fête fixe, 31 octobre. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ALLSAINTSDAY </td>\n   <td style=\"text-align:left;\"> Fête fixe, 1er novembre. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ARMISTICE </td>\n   <td style=\"text-align:left;\"> Fête fixe, 11 novembre. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CHRISTMAS </td>\n   <td style=\"text-align:left;\"> Fête fixe, 25 décembre. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n::: callout-note\n## Exercice\nCréer un calendrier qui contient tous les jours fériés de la France.\n:::\n\t \n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nfrenchCalendar <- calendar.new()\ncalendar.holiday(frenchCalendar, \"NEWYEAR\")\ncalendar.holiday(frenchCalendar, \"EASTERMONDAY\") # Lundi de Pâques\ncalendar.holiday(frenchCalendar, \"MAYDAY\") # 1er mai\ncalendar.fixedday(frenchCalendar, 5, 8)\ncalendar.holiday(frenchCalendar, \"WHITMONDAY\") # Lundi de Pentecôte\ncalendar.fixedday(frenchCalendar, 7, 14)\ncalendar.holiday(frenchCalendar, \"ASSUMPTION\") # Assomption\ncalendar.holiday(frenchCalendar, \"ALLSAINTSDAY\") # Toussaint\ncalendar.holiday(frenchCalendar, \"ARMISTICE\")\n```\n:::\n\n:::\n\n\n\n## Création de régresseurs JO\n\nLe modèle général de correction de jours ouvrables peut s'écrire de la façon suivante :\n$$\nX_t = \\sum_{i=1}^{7} \\alpha_i N_{it} + \\varepsilon_t\n$$\nAvec : \n\n- $N_{it}$ le nombre de jours de lundis ($i=1$), ..., dimanches et jours fériés ($i=7$)\n\n- $\\alpha_i$ l'effet d'un jour de type $i$\n\nPour éviter les problèmes de multi-colinéarité, on réécrit le modèle en utilisant une modalité de référence (ici dimanche). On désaisonnalise également les régresseurs en enlevant la moyenne de long-terme :\n$$X_t =  \\sum_{i=1}^{6} \\beta_i (N_{it} - N_{7t}) + \n\\bar{\\alpha} \\underbrace{(N_t - \\bar{N}_t)}_{LY_t} +  \\varepsilon_t$$\nCe modèle peut être simplifié si en faisant des hypothèses sur les effets des jours ouvrés :\n\n- L'hypothèse *working days* correspond au cas où l'on suppose que tous les jours de la semaine (lundi à vendredi) ont le même effet ($\\alpha_1=\\dots=\\alpha_5$), les samedis et les dimanches (et jours fériés) ont le même effet ($\\alpha_6=\\alpha_7$) et sont utilisés en tant que variable de contraste.\n\n- L'hypothèse *trading days* correspond au cas où l'on suppose que tous les jours ont un effet différent et les dimanches (et jours fériés) sont utilisés en tant que variable de constrate.\n\nSous JDemetra+ on ne peut utiliser que ces deux hypothèses mais `rjd3modelling` permet de construire d'autres types de J0.\n\n\nDe manière plus générale, lorsque l'on utilise une variable de contraste, les régresseurs $CJO_{t,i}$ associé au groupe $i$ est calculé de la façon suivante :\n$$\nCJO_{t,i} = \\underbrace{\\sum_{j\\in\\text{groupe }i}N_{jt}}_{\n\\text{nb de jours du groupe }i\n} - \n\\frac{\\sum_{j\\in\\text{groupe }i}1}{\\sum_{j\\in\\text{groupe }0}1}\n\\times\n\\underbrace{\\sum_{j\\in\\text{groupe }0}N_{jt}}_{\n\\text{nb de jours du groupe contraste}\n}\n$$\nDans le cas *working days*, il y a 2 jours dans le groupe contraste (samedi et dimanche, $\\sum_{j\\in\\text{groupe }0}1=2$) et 5 jours dans le groupe 1 (lundi à vendredi, $\\sum_{j\\in\\text{groupe }1}1=5$). Au mois $t$, le régresseurs JO type de jours est donc égal au nombre de jours de la semaine dans le mois, mois $5/2\\times$ nombre de jours de week-end.\n\n\nLes régresseurs J0 peuvent être créés à partir de 2 fonctions : `htd()` qui permet de les créer à partir d'un calendrier spécifique et `td()`. Dans ces fonctions, le paramètre le plus important est `groups` pour permet de faire des hypothèses sur les jours. C'est un vecteur de longueur 7 (le nombre de jours de la semaine) dont chaque élément indique à quel groupe le jour de la semaine associé correspond. La variable de contraste est associé au groupe 0.  \nPar exemple, `groups = c(1,2,3,4,5,6,0)` correspond au *trading days* et `groups = c(1,1,1,1,1,0,0)` correspond au *working days*.\n\nPar exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups <- c(1, 2, 3, 4, 5, 6, 0)\nfrequency <- 12\nstart <- c(2000,1)\nwkd <- htd(frenchCalendar, frequency = frequency, start = start, length = 12*35,\n         groups = groups)\nwkd <- ts(wkd, start = start, frequency = frequency)\n```\n:::\n\n\n\n::: callout-note\n## Exercice\nComparer le régresseurs JO *working days* créé avec le calendrier français et celui sans hypothèse sur les jours fériés (fonction `td()`).\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups <- c(1, 1, 1, 1, 1, 0, 0)\nfrequency <- 12\nstart <- c(2000,1)\nwkd <- htd(frenchCalendar, frequency = frequency, start = start, length = 12*35,\n         groups = groups)\nwkd <- ts(wkd, start = start, frequency = frequency)\nwkd_def <- td(frequency = frequency, start = start, length = 12*35,\n         groups = groups)\nwkd_def <- ts(wkd_def, start = start, frequency = frequency)\ndata <- ts.union(wkd, wkd_def)\nplot(data, col = c(\"orange\",\"black\"),\n     plot.type = \"single\")\n```\n\n::: {.cell-output-display}\n![](R-2-CJO_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## Régresseur *leap year*\n\n\nLe régresseur année bissextile (*leap year*), $LY_t$ doit être créé à la main. \nIl est égal à la différence entre le nombre de jours dans le mois $t$ et le nombre de jours moyens dans le mois $t$, $\\bar N_t$. \nTous les mois ont le même nombre de jours, sauf le mois de février qui est de 29 jours tous les 4 ans. \n$\\bar N_t$ est donc égal à 30 ou 31 si le mois considéré n'est pas un mois de février (et donc $N_t - \\bar N_t=0$) à 28,25 en février^[\n En réalité, la vraie valeur est 28,2425. En effet, une année bissextile est une année divisible par 4 mais pas par 100, sauf si elle est divisible par 400 : 1900 n'était pas une année bissextile mais 2000 l'était !\n ].\n$$\nLY_{t} =\n\\begin{cases}\n  0,75 & \\mbox{si } t \\mbox{ est un mois de février bissextil } \\\\\n  -0,25 & \\mbox{si } t \\mbox{ est un mois de février non bissextil } \\\\\n  0 & \\mbox{sinon}\n\\end{cases}\n$$\n\n\n::: callout-note\n## Exercice\nCréer une fonction `leap_year` qui permet de générer le régresseur *leap year*.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nleap_year <- function(start = 1990, end = 2030, frequency = 12){\n  ly <- ts(0, start = start, end = end, frequency = 12)\n  mois_feb <- cycle(ly) == 2\n  annees <- trunc(round(time(ly), 3)) # arrondi car parfois des pbs avec fonction time\n  # On utilise la définition exacte\n  is_ly <- (annees %% 400 == 0) |\n    ((annees %% 4 == 0) & (annees %% 100 != 0))\n  ly[mois_feb] <- 28 - 28.2425\n  ly[mois_feb & is_ly] <- 29 - 28.2425\n  # on change si besoin la fréquence\n  stats::aggregate(ly, nfrequency = frequency) \n}\nleap_year(frequency = 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Jan     Feb     Mar     Apr     May     Jun     Jul     Aug     Sep\n1990  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1991  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1992  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1993  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1994  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1995  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1996  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1997  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1998  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n1999  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2000  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2001  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2002  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2003  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2004  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2005  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2006  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2007  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2008  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2009  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2010  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2011  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2012  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2013  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2014  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2015  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2016  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2017  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2018  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2019  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2020  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2021  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2022  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2023  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2024  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2025  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2026  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2027  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2028  0.0000  0.7575  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2029  0.0000 -0.2425  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000  0.0000\n2030  0.0000                                                                \n         Oct     Nov     Dec\n1990  0.0000  0.0000  0.0000\n1991  0.0000  0.0000  0.0000\n1992  0.0000  0.0000  0.0000\n1993  0.0000  0.0000  0.0000\n1994  0.0000  0.0000  0.0000\n1995  0.0000  0.0000  0.0000\n1996  0.0000  0.0000  0.0000\n1997  0.0000  0.0000  0.0000\n1998  0.0000  0.0000  0.0000\n1999  0.0000  0.0000  0.0000\n2000  0.0000  0.0000  0.0000\n2001  0.0000  0.0000  0.0000\n2002  0.0000  0.0000  0.0000\n2003  0.0000  0.0000  0.0000\n2004  0.0000  0.0000  0.0000\n2005  0.0000  0.0000  0.0000\n2006  0.0000  0.0000  0.0000\n2007  0.0000  0.0000  0.0000\n2008  0.0000  0.0000  0.0000\n2009  0.0000  0.0000  0.0000\n2010  0.0000  0.0000  0.0000\n2011  0.0000  0.0000  0.0000\n2012  0.0000  0.0000  0.0000\n2013  0.0000  0.0000  0.0000\n2014  0.0000  0.0000  0.0000\n2015  0.0000  0.0000  0.0000\n2016  0.0000  0.0000  0.0000\n2017  0.0000  0.0000  0.0000\n2018  0.0000  0.0000  0.0000\n2019  0.0000  0.0000  0.0000\n2020  0.0000  0.0000  0.0000\n2021  0.0000  0.0000  0.0000\n2022  0.0000  0.0000  0.0000\n2023  0.0000  0.0000  0.0000\n2024  0.0000  0.0000  0.0000\n2025  0.0000  0.0000  0.0000\n2026  0.0000  0.0000  0.0000\n2027  0.0000  0.0000  0.0000\n2028  0.0000  0.0000  0.0000\n2029  0.0000  0.0000  0.0000\n2030                        \n```\n:::\n:::\n\n:::\n\n## Exercice bilan\n\n::: callout-note\n## Exercice\nCréer un objet `regresseurs_JO` qui contiendra tous les jeux de régresseurs plausibles. Par exemple :\n\n- le régresseur *leap year*\n\n- le jeu de régresseur *trading days* (`REG6`, lundi à samedi, dimanche = contraste)\n\n- le jeu de régresseur *working days* (`REG1`, lundi =... = vendredi, samedi=dimanche=contraste)\n\n- le jeu `REG2` : lundi = ... = vendredi, samedi et dimanche = contraste\n\n- le jeu `REG3` : lundi, mardi = ... = vendredi, samedi = dimanche = contraste\n\n- le jeu `REG5` : lundi à vendredi, samedi = dimanche = contraste\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nfrequency <- 12\nstart <- c(1990,1)\nend = c(2030, 1)\nlength = (end[1] - start[1]) * 12 + end[2] - start[2]\n\nly <- leap_year(frequency = frequency, start = start,\n                end = end)\nreg6 <- htd(frenchCalendar, frequency = frequency, start = start, length = length,\n           groups = c(1, 2, 3, 4, 5, 6, 0))\nreg5 <- htd(frenchCalendar, frequency = frequency, start = start, length = length,\n            groups = c(1, 2, 3, 4, 5, 0, 0))\nreg3 <- htd(frenchCalendar, frequency = frequency, start = start, length = length,\n            groups = c(1, 2, 2, 2, 2, 0, 0))\nreg2 <- htd(frenchCalendar, frequency = frequency, start = start, length = length,\n            groups = c(1, 1, 1, 1, 1, 2, 0))\nreg1 <- htd(frenchCalendar, frequency = frequency, start = start, length = length,\n            groups = c(1, 1, 1, 1, 1, 0, 0))\n\n\nregresseurs_JO <- ts(cbind(reg1, reg2, reg3, reg5, reg6),\n                              start = start, frequency = frequency)\nregresseurs_JO <- ts.union(regresseurs_JO,\n                           ly)\ncolnames(regresseurs_JO) <- c(\"REG1_semaine\",\n                              sprintf(\"REG2_%s\", c(\"lundi_a_vendredi\", \"samedi\")),\n                              sprintf(\"REG3_%s\", c(\"lundi\", \"mardi_a_vendredi\")),\n                              sprintf(\"REG5_%s\", c(\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\")),\n                              sprintf(\"REG6_%s\", c(\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\")),\n                              \"leap_year\")\n```\n:::\n\n:::\n\n\n## Effet graduel de Pâques\n\nPrenons l'exemple de la vente de chocolats. \nIl est assez commun d'offrir des chocolats à Pâques : il y a donc une hausse des ventes autour du lundi de Pâques. \nToutefois, ces ventes ne se font pas le jour de Pâques mais plusieurs jours avant, et plus on se rapproche du jour J, plus ces ventes sont importantes. \nC'est ce que l'on appel l'**effet graduel de Pâques**. \nSous JDemetra+ on peut définir le nombre de jours avant Pâques pour lequel on considère qu'il y a un effet (`easter.duration`, entre 1 et 20) ou laisser ce choix à JDemetra+. \n\n\n::: callout-note\n## Exercice\nSerait-il pertinent de considérer un effet graduel de Noël dans le modèle Reg-ARIMA ?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\nNon car l'effet graduel de Noël est en fait saisonnier car c'est un jour fixe ! Pour Pâques, comme c'est une fête mobile, les jours précédents peuvent être dans des mois différents en fonction de l'année considérée. Je ne suis pas entré dans les détails mais le régresseur utilisé pour la correction de l'effet graduel de Pâques est désaisonnalisé pour ne prendre en compte que les régresseurs.\n:::\n\n\n# Utilisation des régresseurs dans `RJDemetra`\n\nDans `RJDemetra`, pour utiliser nos régresseurs jours ouvrables personnalisés, il faut créer sa propre spécification (fonctions `x13_spec()` ou `regarima_spec_x13()`) en utilisant l'option `usrdef.varEnabled = TRUE`, en spécifiant les régresseurs dans `usrdef.var` et indiquant que les régresseurs sont des régresseurs calendaires avec l'option `usrdef.varType = \"Calendar\"`. Par exemple : \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RJDemetra)\nipi_fr <- ipi_c_eu[, \"FR\"]\n# On arrête la série en décembre 2019 pour éviter les changements de résultats\n# liés aux futures actualisation des données de RJDemetra\nipi_fr <- window(ipi_fr, end = c(2019, 12))\n# on garde le jeu reg6\nwkd <- regresseurs_JO[,c(grep(\"REG6\", colnames(regresseurs_JO), value = TRUE),\n                         \"leap_year\")]\n# Pour simplifier l'output, on enlève le \"REG6_\"\n# mais ce n'est pas obligatoire\ncolnames(wkd) <- gsub(\"REG6_\", \"\", colnames(wkd))\nmyspec1 <- regarima_spec_x13(spec = \"RG5c\",\n                             usrdef.varEnabled = TRUE,\n                             usrdef.var = wkd,\n                             usrdef.varType = \"Calendar\",\n                             easter.enabled = FALSE)\nmyreg1 <- regarima(ipi_fr, myspec1)\nsummary(myreg1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (0, 1, 1, 0, 1, 1)\n\nModel: RegARIMA - X13\nEstimation span: from 1-1990 to 12-2019\nLog-transformation: yes\nRegression model: no mean, trading days effect(7), no leap year effect, no Easter effect, outliers(3)\n\nCoefficients:\nARIMA: \n          Estimate Std. Error T-stat Pr(>|t|)    \nTheta(1)  -0.50798    0.04734 -10.73   <2e-16 ***\nBTheta(1) -0.64138    0.04265 -15.04   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nRegression model: \n              Estimate Std. Error  T-stat Pr(>|t|)    \nlundi         0.002783   0.001300   2.141 0.032971 *  \nmardi         0.009488   0.001427   6.648 1.16e-10 ***\nmercredi      0.006995   0.001467   4.767 2.75e-06 ***\njeudi         0.009785   0.001495   6.545 2.14e-10 ***\nvendredi      0.006426   0.001472   4.365 1.68e-05 ***\nsamedi       -0.014138   0.001362 -10.380  < 2e-16 ***\nleap_year     0.019624   0.005601   3.504 0.000519 ***\nLS (11-2008) -0.082057   0.014452  -5.678 2.89e-08 ***\nLS (1-2009)  -0.070878   0.014473  -4.897 1.49e-06 ***\nAO (5-2011)   0.065055   0.014619   4.450 1.16e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 0.01751 on 334 degrees of freedom\nLog likelihood = 907.8, aic =  1416, aicc =  1417, bic(corrected for length) = -7.887\n```\n:::\n:::\n\n\n::: {.callout-warning}\n## Pour information\nPour ne pas repartir de zéro et avoir des modèles, il y a sous JDemetra+ 13 spécifications pré-définies décrites [ici](/2021/rte/PDF/Predefined_specifications.pdf) ou dans l'aide des fonction RJDemetra associés (`?regarima`, `?x13` ou `?tramoseats`).\n:::\n\nPour faire des tests multiples sur les régresseurs jours ouvrables, on peut utiliser la fonction `car::linearHypothesis()`. Dans le modèle précédent, il parait clair que les régresseurs jours ouvrables sont significatifs. Toutefois, on peut se demander, si par parcimonie on peut simplifier le modèle en regroupant les jours de la semaine :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\nlinearHypothesis(myreg1,\n                 c(\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"),\n                 c(0, 0, 0, 0, 0, 0), test = \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\nlundi = 0\nmardi = 0\nmercredi = 0\njeudi = 0\nvendredi = 0\nsamedi = 0\n\nModel 1: restricted model\nModel 2: myreg1\n\n  Res.Df Df      F    Pr(>F)    \n1    340                        \n2    334  6 178.21 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nlinearHypothesis(myreg1,\n                 c(\"lundi = mardi\",\"mardi = mercredi\",\"mercredi = jeudi\",\"jeudi = vendredi\"), test = \"F\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\nlundi - mardi = 0\nmardi - mercredi = 0\nmercredi - jeudi = 0\njeudi - vendredi = 0\n\nModel 1: restricted model\nModel 2: myreg1\n\n  Res.Df Df      F   Pr(>F)   \n1    338                      \n2    334  4 4.0567 0.003168 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n\n::: callout-note\n## Exercice\nEssayez maintenant sur vos propres séries. Tester de laisser ou non l'effet graduel de Pâques (`easter.enabled = TRUE`)\n:::\n\n# Test de la présence de jours ouvrables résiduels\n\nUn point important lorsque le fait de la correction de jours ouvrables est de tester s'il reste un effet jour ouvrable après la correction. La fonction `rjd3modelling::td.f()` peut aider à le faire.\n\nGénéralement ce test est effectué après la décomposition, sur la composante désaisonnalisée ou sur l'irrégulier. Plutôt que la fonction `regarima` on va utiliser la fonction `x13` qui effectue la décomposition sur la série linéarisée. Ces tests sont disponibles dans le sous-objet `.$diagnostics` (\"f-test on sa (td)\" et \"f-test on i (td)\") :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyspec1_sa <- x13_spec(spec = \"RSA5c\",\n                    usrdef.varEnabled = TRUE,\n                    usrdef.var = wkd,\n                    usrdef.varType = \"Calendar\",\n                    easter.enabled = FALSE)\nmysa <- x13(ipi_fr, myspec1_sa)\n# On retrouve d'ailleurs la partie regarima\n# summary(mysa$regarima)\nmysa$diagnostics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Relative contribution of the components to the stationary\n portion of the variance in the original series,\n after the removal of the long term trend \n Trend computed by Hodrick-Prescott filter (cycle length = 8.0 years)\n           Component\n Cycle         1.983\n Seasonal     64.165\n Irregular     0.541\n TD & Hol.     2.735\n Others       32.264\n Total       101.687\n\n Combined test in the entire series \n Non parametric tests for stable seasonality\n                                                          P.value\n   Kruskall-Wallis test                                      0.000\n   Test for the presence of seasonality assuming stability   0.000\n   Evolutive seasonality test                                0.236\n \n Identifiable seasonality present\n\n Residual seasonality tests \n                                      P.value\n qs test on sa                          1.000\n qs test on i                           1.000\n f-test on sa (seasonal dummies)        0.922\n f-test on i (seasonal dummies)         0.837\n Residual seasonality (entire series)   0.965\n Residual seasonality (last 3 years)    1.000\n f-test on sa (td)                      0.010\n f-test on i (td)                       0.058\n```\n:::\n:::\n\n\nSous JDemetra+, les tests affichés portent sur les 8 dernières années et dans RJDemetra sur la série entière ! Pour reproduire les résultats de JDemetra+, utiliser la fonction `rjd3modelling::td.f()`. Pour le test, six spécifications différentes sont possibles :\n\n1. Par défaut sous JDemetra+ et `model = \"R100\"` sous `rjd3modelling`\n$$\ny_t=c + \\alpha y_{t-1} + \\sum_{i=1}^{6} \\beta_i (N_{it} - N_{7t}) +  \\varepsilon_t\n$$\n\n2. `model = \"D1\"` \n$$\n\\Delta y_t - \\overline{\\Delta y}  =\\sum_{i=1}^{6} \\beta_i (N_{it} - N_{7t}) +  \\varepsilon_t\n$$\n\n3. `model = \"WN\"`\n$$\ny_t - \\bar y =\\sum_{i=1}^{6} \\beta_i (N_{it} - N_{7t}) +  \\varepsilon_t\n$$\navec $y_t$ pris en logarithme si le schéma est multiplicatif. \nDans tous les cas $(H_0):\\beta_1=\\dots = \\beta_6=0$ et les régresseurs utilisés ne prennent pas en compte le calendrier personnalisé que l'on a créé !\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pour l'installer :\n# remotes::install_github(\"palatej/rjd3modelling\")\\\nlibrary(rjd3modelling)\n# Schéma multiplicatif :\nmysa$regarima$model$spec_rslt[\"Log transformation\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Log transformation\n1               TRUE\n```\n:::\n\n```{.r .cell-code}\nsa <- mysa$final$series[,\"sa\"]\ni <- mysa$final$series[,\"i\"]\nrjd3modelling::td.f(log(sa), nyears = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue:  5.267749 \nP-Value:  0.0001 \n```\n:::\n\n```{.r .cell-code}\nrjd3modelling::td.f(log(i), nyears = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue:  5.596639 \nP-Value:  0.0001 \n```\n:::\n:::\n\n::: {.cell opts.label='alerte'}\nEn réalité les tests affichés dans JDemetra+ et RJDemetra ne sont pas effectuées sur les composantes \"finales\" de l'irrégulier et la série désaisonnalisée, mais sur les composantes issues de X-11 avant ajout des points atypiques du préajustement. Pour X-13-ARIMA ces séries ne pour l'instant pas facilement exportables (et je ce n'est sûrement pas possible de l'exporter depuis JDemetra+), mais heureusement pour vous, il existe une \"solution\" en utilisant la fonction suivante.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Résultats différents sur l'ensemble de la série\nrjd3modelling::td.f(log(sa), nyears = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue:  3.151896 \nP-Value:  0.0050 \n```\n:::\n\n```{.r .cell-code}\nrjd3modelling::td.f(log(i), nyears = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue:  2.512405 \nP-Value:  0.0215 \n```\n:::\n\n```{.r .cell-code}\nextract_sa_cmp <- function(x, comp = \"sa\", forecast = FALSE){\n  # valeurs possibles pour comp : y, t, sa, s, i\n  jmodel <- suppressWarnings(jx13(get_ts(x), x13_spec(x)))\n  jres <- jmodel$result@internal$getResults()\n  jres <- new(Class = \"X13_java\", internal = jres)\n  if (forecast) {\n    s_forecast = \"_f\"\n  } else {\n    s_forecast = \"\"\n  }\n  RJDemetra:::result(jres,\n                     sprintf(\"decomposition.%s_cmp%s\",\n                             comp,\n                             s_forecast))\n}\nsa <- extract_sa_cmp(mysa, \"sa\")\ni <- extract_sa_cmp(mysa, \"i\")\n\n# Pour mettre tous les résultats sous forme de matrice :\nt(simplify2array(\n  list(rjd3modelling::td.f(log(sa), nyears = 8),\n       rjd3modelling::td.f(log(i), nyears = 8),\n       rjd3modelling::td.f(log(sa), nyears = 0),\n       rjd3modelling::td.f(log(i), nyears = 0))\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     value    pvalue      \n[1,] 5.267749 0.0001100706\n[2,] 5.596639 5.799578e-05\n[3,] 2.949279 0.008035661 \n[4,] 3.063659 0.006181793 \n```\n:::\n:::\n\n\nUne autre solution est de passer par les objets `jSA` et d'exporter les indicateurs `\"diagnostics.td-i-last\"` et `\"diagnostics.td-sa-last\"`, ou bien de rajouter ces indicateurs dans le paramètre `userdefined` de `x13()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\njsa <- jx13(get_ts(mysa), x13_spec(mysa))\nget_indicators(jsa,\"diagnostics.td-sa-last\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`diagnostics.td-sa-last`\n[1] 3.344080933 0.005148262\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\nget_indicators(jsa,\"diagnostics.td-i-last\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`diagnostics.td-i-last`\n[1] 2.58322732 0.02366265\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\nmysa <- x13(ipi_fr, myspec1_sa, userdefined = c(\"diagnostics.td-sa-last\", \"diagnostics.td-i-last\"))\nmysa$user_defined$`diagnostics.td-sa-last`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.344080933 0.005148262\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\nmysa$user_defined$`diagnostics.td-i-last`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.58322732 0.02366265\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\n# # ou :\n# t(simplify2array(\n#   mysa$user_defined\n# ))\n```\n:::\n\nPrivilégier plutôt ces deux dernières solutions, cela évite se regarder le schéma de décomposition (mais on ne peut pas personnaliser le test).\n\n::: callout-note\n## Exercice\nEssayez de corriger l'effet JO résiduel sur cette série.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nLa spécification parait bonne, les régresseurs sont tous significatifs mais le modèle ARIMA est estimé sur 30 ans, ce qui peut paraitre beaucoup. \n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\n# Une option serait de couper les régresseurs J0 en deux\ntd_reg_post_2003 <- td_reg_pre_2003  <- \n  regresseurs_JO[,grep(\"REG6\", colnames(regresseurs_JO))]\nwindow(td_reg_pre_2003, end = c(2002, 12)) <- 0\nwindow(td_reg_post_2003, start = c(2003, 1)) <- 0\nwkd2 <- ts.union(td_reg_pre_2003, td_reg_post_2003,\n                 leap_year(frequency = 12))\ncolnames(wkd2) <- c(paste0(c(\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\n                   \"samedi\"),\"_av2003\"),\n                   paste0(c(\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\n                   \"samedi\"),\"_ap2003\"),\"leap_year\")\n\nmyspec2_sa <- x13_spec(spec = \"RSA5c\",\n                    usrdef.varEnabled = TRUE,\n                    usrdef.var = wkd2,\n                    usrdef.varType = \"Calendar\",\n                    easter.enabled = FALSE)\nmysa2 <- x13(ipi_fr, myspec2_sa,\n                    userdefined = c(\"diagnostics.td-sa-last\", \"diagnostics.td-i-last\"))\nsummary(mysa2$regarima)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (0, 1, 1, 0, 1, 1)\n\nModel: RegARIMA - X13\nEstimation span: from 1-1990 to 12-2019\nLog-transformation: yes\nRegression model: no mean, trading days effect(13), no leap year effect, no Easter effect, outliers(3)\n\nCoefficients:\nARIMA: \n          Estimate Std. Error  T-stat Pr(>|t|)    \nTheta(1)  -0.48540    0.04856  -9.995   <2e-16 ***\nBTheta(1) -0.62431    0.04349 -14.356   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nRegression model: \n                 Estimate Std. Error T-stat Pr(>|t|)    \nlundi_av2003     0.003249   0.001655  1.963 0.050434 .  \nmardi_av2003     0.011820   0.001867  6.332 7.48e-10 ***\nmercredi_av2003  0.005254   0.001930  2.722 0.006809 ** \njeudi_av2003     0.011647   0.001935  6.018 4.49e-09 ***\nvendredi_av2003  0.007292   0.001911  3.816 0.000161 ***\nsamedi_av2003   -0.017684   0.001799 -9.828  < 2e-16 ***\nlundi_ap2003     0.002618   0.002069  1.265 0.206554    \nmardi_ap2003     0.006065   0.002075  2.923 0.003695 ** \nmercredi_ap2003  0.009327   0.002153  4.331 1.94e-05 ***\njeudi_ap2003     0.007169   0.002230  3.214 0.001431 ** \nvendredi_ap2003  0.005525   0.002237  2.469 0.014019 *  \nsamedi_ap2003   -0.009899   0.001963 -5.043 7.40e-07 ***\nleap_year        0.019483   0.005484  3.553 0.000434 ***\nLS (11-2008)    -0.078116   0.014266 -5.476 8.37e-08 ***\nLS (1-2009)     -0.070358   0.014298 -4.921 1.33e-06 ***\nAO (5-2011)      0.060202   0.014490  4.155 4.11e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 0.01702 on 328 degrees of freedom\nLog likelihood =   918, aic =  1407, aicc =  1410, bic(corrected for length) = -7.843\n```\n:::\n\n```{.r .cell-code}\nt(simplify2array(\n  mysa2$user_defined\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           [,1]       [,2]\ndiagnostics.td-sa-last 1.857965 0.09706833\ndiagnostics.td-i-last  1.445690 0.20643428\n```\n:::\n:::\n\n:::\n\n\n::: callout-note\n## Exercice\nEn appliquant la même spécification que précédemment (`myspec1_sa`), y a-t-il un effet JO résiduel sur la série Papier Carton (`y_p_c <- data_rte[,\"6_Papier Carton\"]`) ? Si oui la corriger.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nIl y a bien un effet JO résiduel. Que pensez-vous des régresseurs JO utilisés dans le modèle RegARIMA ? Regarder l'aide de la fonction `x13_spec`, en particulier le paramètre `tradingdays.test`. Ensuite essayer d'affiner votre modèle.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remarque : dans cette spécification on n'ajoute pas d'effet graduel de Pâques\n# Est-ce que cela aurait un sens de le faire ? À vous de me le dire !\ny_p_c <- data_rte[,\"6_Papier Carton\"]\nmysa <- x13(y_p_c, myspec1_sa)\n# Il y a un effet JO résiduel !\nmysa$diagnostics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Relative contribution of the components to the stationary\n portion of the variance in the original series,\n after the removal of the long term trend \n Trend computed by Hodrick-Prescott filter (cycle length = 8.0 years)\n           Component\n Cycle        21.193\n Seasonal     27.626\n Irregular     7.694\n TD & Hol.     0.000\n Others       45.758\n Total       102.272\n\n Combined test in the entire series \n Non parametric tests for stable seasonality\n                                                          P.value\n   Kruskall-Wallis test                                      0.000\n   Test for the presence of seasonality assuming stability   0.000\n   Evolutive seasonality test                                0.034\n \n Identifiable seasonality present\n\n Residual seasonality tests \n                                      P.value\n qs test on sa                          1.000\n qs test on i                           1.000\n f-test on sa (seasonal dummies)        0.933\n f-test on i (seasonal dummies)         0.904\n Residual seasonality (entire series)   0.997\n Residual seasonality (last 3 years)    0.688\n f-test on sa (td)                      0.002\n f-test on i (td)                       0.019\n```\n:::\n\n```{.r .cell-code}\n# Mais lorsque l'on  regarde le modèle regarima, il n'y a pas de régresseur JO !\nsummary(mysa$regarima)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (0, 1, 1, 0, 1, 1)\n\nModel: RegARIMA - X13\nEstimation span: from 1-2006 to 9-2020\nLog-transformation: yes\nRegression model: no mean, no trading days effect, no leap year effect, no Easter effect, outliers(1)\n\nCoefficients:\nARIMA: \n          Estimate Std. Error  T-stat Pr(>|t|)    \nTheta(1)  -0.46366    0.06994  -6.629 4.64e-10 ***\nBTheta(1) -0.99973    0.05298 -18.870  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nRegression model: \n             Estimate Std. Error T-stat Pr(>|t|)    \nLS (12-2008) -0.10731    0.02415 -4.444 1.62e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 0.02602 on 160 degrees of freedom\nLog likelihood = 349.5, aic =  3638, aicc =  3639, bic(corrected for length) = -7.204\n```\n:::\n\n```{.r .cell-code}\n# Première étape : ne pas faire de test pour supprimer les effets J0\nmysa <- x13(y_p_c, x13_spec(myspec1_sa, tradingdays.test = \"None\"),\n            userdefined = c(\"diagnostics.td-sa-last\", \"diagnostics.td-i-last\"))\n# L'effet JO est corrigé au niveau global mais pas sur les 8 dernières années\nmysa$diagnostics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Relative contribution of the components to the stationary\n portion of the variance in the original series,\n after the removal of the long term trend \n Trend computed by Hodrick-Prescott filter (cycle length = 8.0 years)\n           Component\n Cycle        20.575\n Seasonal     27.637\n Irregular     6.393\n TD & Hol.     0.816\n Others       48.393\n Total       103.814\n\n Combined test in the entire series \n Non parametric tests for stable seasonality\n                                                          P.value\n   Kruskall-Wallis test                                      0.000\n   Test for the presence of seasonality assuming stability   0.000\n   Evolutive seasonality test                                0.037\n \n Identifiable seasonality present\n\n Residual seasonality tests \n                                      P.value\n qs test on sa                          1.000\n qs test on i                           1.000\n f-test on sa (seasonal dummies)        0.918\n f-test on i (seasonal dummies)         0.756\n Residual seasonality (entire series)   0.994\n Residual seasonality (last 3 years)    0.507\n f-test on sa (td)                      0.313\n f-test on i (td)                       0.301\n```\n:::\n\n```{.r .cell-code}\nmysa$user_defined$`diagnostics.td-sa-last` # à 5%\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.34896458 0.03760521\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\nmysa$user_defined$`diagnostics.td-i-last` # à 1 %\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.345440983 0.005134185\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\n# Une proposition de nouveau modèle :\n# On va diviser les régresseurs avant et après 2012 pour prendre en compte\n# un changement de coefficients\n\ntd_reg_post_2012 <- td_reg_pre_2012  <-\n  regresseurs_JO[,grep(\"REG6\", colnames(regresseurs_JO))]\nwindow(td_reg_pre_2012, end = c(2011, 12)) <- 0\nwindow(td_reg_post_2012, start = c(2012, 1)) <- 0\nwkd2 <- ts.union(td_reg_pre_2012, td_reg_post_2012,\n                 leap_year(frequency = 12))\ncolnames(wkd2) <- c(paste0(c(\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\n                             \"samedi\"),\"_av2003\"),\n                    paste0(c(\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\n                             \"samedi\"),\"_ap2003\"),\"leap_year\")\n\nmysa <- x13(y_p_c, x13_spec(mysa,\n                            usrdef.var = wkd2,\n                            usrdef.varType = \"Calendar\"),\n            userdefined = c(\"diagnostics.td-sa-last\", \"diagnostics.td-i-last\",\n                            \"diagnostics.fcast-outsample-mean\",\n                            \"diagnostics.fcast-outsample-variance\"))\n# plus de JO résiduel à 5 %\nmysa$user_defined$`diagnostics.td-sa-last`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.0868370 0.3765974\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\nmysa$user_defined$`diagnostics.td-i-last`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.85830213 0.09700665\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 88 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\n# Il y a beaucoup de paramètres à estimer\n# mais pas de gros problème visible dans la qualité du modèle\nmysa$regarima$residuals.stat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$st.error\n[1] 0.02452254\n\n$tests\n\n\u001b[1mNormality\u001b[22m\n         Statistic P.value    \nmean      -0.28924  0.7728 ***\nskewness  -0.05687  0.7662 ***\nkurtosis   2.92906  0.8529 ***\n\nSignif. codes:  H0 (normality of residuals) is not rejected at \nsignificance levels: 0.1 ***0.05 **\n\n\u001b[1mIndependence\u001b[22m\n                                       Statistic P.value    \nljung box                               19.31238  0.6260 ***\nljung box (residuals at seasonal lags)   0.50908  0.7753 ***\n\nSignif. codes: H0 (independence of residuals) is not rejected at \nsignificance levels: 0.1 ***0.05 **\n\n\u001b[1mLinearity\u001b[22m\n                              Statistic P.value    \nljung box (squared residuals)  23.77751  0.3590 ***\n\nSignif. codes:  H0 (no conditional heteroscedasticity of residuals) is not rejected at \nsignificance levels: 0.1 ***0.05 **\n```\n:::\n\n```{.r .cell-code}\n# Ni dans la qualité des prévisions\nmysa$user_defined$`diagnostics.fcast-outsample-mean`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.97339484  0.05035161\nattr(,\"description\")\n[1] \"T with 145 degrees of freedom\"\n```\n:::\n\n```{.r .cell-code}\nmysa$user_defined$`diagnostics.fcast-outsample-variance`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.2820217 0.2075966\nattr(,\"description\")\n[1] \"F with 18 degrees of freedom in the nominator and 146 degrees of freedom in the denominator\"\n```\n:::\n\n```{.r .cell-code}\n# On pourrait également continuer à faire des tests pour simplifier le modèle\n```\n:::\n\n:::\n\n",
    "supporting": [
      "R-2-CJO_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}