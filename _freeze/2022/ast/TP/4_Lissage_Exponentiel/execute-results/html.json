{
  "hash": "7f06d6debfbc1b4ebb1a3e106840bd88",
  "result": {
    "markdown": "---\ntitle: \"4 - Lissage exponentiel\"\nsubtitle: |\n  Analyse des séries temporelles avec R\nauthor: \"Alain Quartier-la-Tente\"\nformat: html\nlang: fr\nlanguage: \n title-block-author-single: Auteur\n---\n\n\n\n\n> L'objectif de ce TP est d'apprendre à appliquer les modèles ETS\n\nLes packages suivants seront utilisés :\n\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/unnamed-chunk-1_74ac98e3e6bf9466d8025009f063e207'}\n\n```{.r .cell-code}\npackages_to_install <- c(\"ggplot2\", \"forecast\", \"RJDemetra\", \"ggdemetra\")\n\npackages <- installed.packages()[,\"Package\"][! packages_to_install %in% installed.packages()[,\"Package\"]]\nif (length(packages) > 0) {\n\tinstall.packages(packages)\n}\nlibrary(forecast)\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n\n::: callout-note\n## Exercice\nEtudier les séries `co2` et `UKgas` : quel modèle parait le plus adapté ?\nFaut-il transformer la série ?\nComparer les prévisions en utilisant des schémas additifs et multiplicatifs et en transformant ou non la série.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/co1-ukgas_1a5bba38868aadc44c4b552841a28cc6'}\n\n```{.r .cell-code}\nautoplot(co2) + autoplot(UKgas)\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/co1-ukgas-1.png){width=672}\n:::\n:::\n\nLes deux séries ont une tendance et une saisonnalité. \nLa saisonnalité parait additive pour `co2` et multiplicative pour `UKGas`. \nPas de raison de transformer les séries.\n\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/co2-ets_9f7b08d216473c1aff1010b9cc25d68c'}\n\n```{.r .cell-code}\nets_co2_add <- ets(co2, model = \"ZZA\")\nets_co2_mult <- ets(co2, model = \"ZZM\")\nets_co2_add\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nETS(M,A,A) \n\nCall:\n ets(y = co2, model = \"ZZA\") \n\n  Smoothing parameters:\n    alpha = 0.5995 \n    beta  = 0.0065 \n    gamma = 0.129 \n\n  Initial states:\n    l = 315.2927 \n    b = 0.0772 \n    s = -0.8309 -1.8609 -3.0483 -2.782 -1.2615 0.7793\n           2.1909 2.7066 2.1724 1.2282 0.6624 0.0439\n\n  sigma:  9e-04\n\n     AIC     AICc      BIC \n1748.989 1750.349 1819.513 \n```\n:::\n\n```{.r .cell-code}\nets_co2_mult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nETS(M,Ad,M) \n\nCall:\n ets(y = co2, model = \"ZZM\") \n\n  Smoothing parameters:\n    alpha = 0.6824 \n    beta  = 0.0415 \n    gamma = 3e-04 \n    phi   = 0.9773 \n\n  Initial states:\n    l = 315.3348 \n    b = 0.1077 \n    s = 0.9972 0.9939 0.9904 0.9909 0.9963 1.0024\n           1.0069 1.0088 1.0074 1.004 1.0018 0.9999\n\n  sigma:  8e-04\n\n     AIC     AICc      BIC \n1721.105 1722.628 1795.777 \n```\n:::\n\n```{.r .cell-code}\nautoplot(window(co2, start = 1993), y = \"Millions de thermies\") +\n\tautolayer(forecast(ets_co2_add, h = 60, PI = FALSE), \"ETS(M,A,A)\") +\n\tautolayer(forecast(ets_co2_mult, h = 60, PI = FALSE), \"ETS(M,Ad,M)\")\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/co2-ets-1.png){width=672}\n:::\n:::\n\nLes prévisions très proches sur le court terme mais s'éloignent sur le long terme.\nCela vient notamment la tendance est amortie dans le modèle multiplicatif.\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/ukgas-ets_60d5cc2a7bf443cce2dd92dd6baa792c'}\n\n```{.r .cell-code}\nets_gas_add <- ets(UKgas, model = \"ZZA\")\nets_gas_mult <- ets(UKgas, model = \"ZZM\")\nets_gas_add_log <- ets(UKgas, model = \"ZZA\", lambda = 0)\nets_gas_add_log_unb <- ets(UKgas, model = \"ZZA\", lambda = 0, biasadj = TRUE)\n\nautoplot(window(UKgas, start = 1970), y = \"co2\") +\n\tautolayer(forecast(ets_gas_add, h = 24, PI = FALSE), \"ETS(A,A,A)\") +\n\tautolayer(forecast(ets_gas_mult, h = 24, PI = FALSE), \"ETS(M,A,M)\") +\n\tautolayer(forecast(ets_gas_add_log, h = 24, PI = FALSE), \"ETS(A,A,A) sur log(UKgas)\") \n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/ukgas-ets-1.png){width=672}\n:::\n:::\n\n\nIci la différence entre multiplicatif et additif est plus nette :\nDans les deux modèles on prévoit une hausse de la tendance mais les amplitudes croissent de manière exponentielle dans le modèle multiplicatif alors qu'elles restent constantes dans le cas additif (ce qui est logique).\nPasser au log ne semble pas avoir beaucoup d'impact.\n\nSur le plus long terme les résultats sont en revanche différents.\nPasser au log conduit à des estimations plus importantes (notamment lorsque l'on corrige du bais. \nRappels : sans correction du biais cela revient à avoir une estimation de la médiane plutôt que moyen, ce qui n'est pas forcément incohérent).\nC'est logique car lorsque l'on passe au log cela revient à supposer que la tendance est également multiplicative.\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/ukgas-transform_21a952679cad8757ce586d3e49c523a1'}\n\n```{.r .cell-code}\nautoplot(window(UKgas, start = 1985), y = \"co2\")  +\n\tautolayer(forecast(ets_gas_mult, h = 60, PI = FALSE), \"ETS(M,A,M)\") +\n\tautolayer(forecast(ets_gas_add_log, h = 60, PI = FALSE), \"ETS(A,A,A) sur log(UKgas)\") +\n\tautolayer(forecast(ets_gas_add_log_unb, h = 60, PI = FALSE), \"ETS(A,A,A) sur log(UKgas) corrigé biais\")\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/ukgas-transform-1.png){width=672}\n:::\n:::\n\nAppliquer le modèle $ETS(A,A,A)$ sur la série en logarithme et utiliser le modèle $ETS(M,M,M)$ donnent des résultats similaires.\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/ukgas-log-multi_12a22510c86a6749afcc09e2d318dbd2'}\n\n```{.r .cell-code}\nautoplot(window(UKgas, start = 1985), y = \"co2\")  +\n\tautolayer(forecast(ets_gas_add_log, h = 60, PI = FALSE), \"ETS(A,A,A) sur log(UKgas)\") +\n\tautolayer(forecast(ets(UKgas, model = \"MMM\"), h = 60, PI = FALSE), \"ETS(M,M,M)\")\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/ukgas-log-multi-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-note\n## Exercice\nL'objectif de cette exercice est d'étudier la série `AirPassengers` en utilisant plusieurs méthodes :\n\n1.  Enlever les 12 derniers mois de `AirPassengers`.\n\n2.  Désaisonnaliser la série en utilisant `stl(., s.window = \"periodic\")` (après transformation de la série) et `RJDemetra::x13(., spec = RJDemetra::x13_spec(easter.enabled = FALSE, transform.function = \"Log\"))`.\n\n3.  Appliquer un modèle ETS sur la série désaisonnalisée.\n\n4.  Prévoir la série désaisonnalisée sur 12 mois puis la série brute réintroduisant :\n\na.  la saisonnalité sur la dernière année pour la méthode STL (peut se faire en une étape avec la fonction `forecast::stlf()`) ;\nb.  les prévisions de la saisonnalité pour la méthode X-13-ARIMA.\n\n4.  Comparer les prévisions des précédentes méthodes avec un ETS directement calculé sur la série désaisonnalisée (avec ou sans transformation de Box-Cox).\n\n5.  Qu'en est-il de la prévision en temps-réel (en utilisant la fonction `tsCV()`) ?\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nPour récupérer la composante saisonnière avec X-13 on pourra utiliser le code suivant\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/unnamed-chunk-2_65361d78025a1f9a56583a6d38c51f16'}\n\n```{.r .cell-code}\nlibrary(RJDemetra)\ny <- window(ipi_c_eu[,\"FR\"], start = 2010)\nx13_spec <- x13_spec(easter.enabled = FALSE, transform.function = \"Log\")\nmod_x13 <- x13(y, x13_spec)\nggdemetra::seasonal(mod_x13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2010 0.9479753 0.9734184 1.1314166 1.0194466 0.9149364 1.1040334 1.0253971\n2011 0.9486036 0.9738929 1.1146702 0.9990949 0.9435734 1.0943653 0.9971672\n2012 0.9744944 0.9952811 1.0894809 0.9994940 0.9609052 1.0773442 1.0308806\n2013 0.9881143 0.9734166 1.0586928 1.0414531 0.9661151 1.0343284 1.0633799\n2014 0.9887445 0.9708317 1.0618924 1.0340629 0.9456969 1.0716857 1.0449424\n2015 0.9611904 0.9664643 1.0947446 1.0268935 0.9248260 1.1112972 1.0452371\n2016 0.9336952 0.9939049 1.1148269 1.0091687 0.9628352 1.0902251 0.9872514\n2017 0.9643035 0.9598990 1.1181909 0.9641950 1.0015167 1.0999538 0.9910340\n2018 0.9940038 0.9589041 1.0890126 0.9941445 0.9936340 1.0782580 1.0244067\n2019 0.9762525 0.9595422 1.0576157 1.0265143 1.0011358 1.0398603 1.0629867\n2020 0.9768492 0.9563783 1.0931460 1.0048644 0.9500369 1.1224476 1.0549500\n           Aug       Sep       Oct       Nov       Dec\n2010 0.7473449 1.0778667 1.0402228 1.0450781 0.9908451\n2011 0.7725295 1.0855555 1.0436457 1.0336021 0.9645023\n2012 0.7668908 1.0190248 1.1114204 1.0328655 0.9392665\n2013 0.7511679 1.0558980 1.0943162 1.0101039 0.9672872\n2014 0.7347217 1.0923548 1.0977123 0.9715733 0.9995163\n2015 0.7410440 1.0774877 1.0685360 1.0097237 0.9855990\n2016 0.7929649 1.0745879 1.0421123 1.0381299 0.9631477\n2017 0.7846862 1.0498446 1.0744776 1.0308174 0.9322877\n2018 0.7891563 1.0084274 1.1117543 1.0382887 0.9294119\n2019 0.7697163 1.0458578 1.0967583 1.0142887 0.9512178\n2020 0.7506828 1.0740572 1.0727587 1.0092022 0.9628865\n```\n:::\n\n```{.r .cell-code}\nggdemetra::seasonaladj(mod_x13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2010  95.25565  95.64233  96.78133  98.48481 104.37885 101.26505  98.30338\n2011 104.36394 104.32359 103.43866 101.69204 116.68408  99.14422 101.28692\n2012 101.89900 100.37365 101.24088  99.85052 100.00987 100.71062 100.69062\n2013  97.45836  98.31350  98.13990  99.28435  99.57405 101.99855  98.92984\n2014  97.90194 100.01734  98.78591  99.51039  97.70572  97.78987  98.85712\n2015  98.41963  99.43461  99.01853  99.71823  98.39689 100.60315  96.72447\n2016 101.85337 100.21080  97.14512 102.36148 102.40590 101.17176  97.03709\n2017 102.56108 101.15647 102.39754 101.63919 102.54447 101.27698 100.40019\n2018 102.41410 102.82571 103.67189 103.60666  99.33235 104.61318 104.06023\n2019 106.32495 106.30070 105.52037 104.43109 105.08065 101.93677 103.29386\n2020 103.39364 104.66569  83.97780  66.37711  77.57594  87.48738  92.32665\n           Aug       Sep       Oct       Nov       Dec\n2010  99.68623 101.12568 100.93991  98.27017 102.84151\n2011 101.35535 101.33060 101.95031 102.84422 103.88777\n2012 102.75257 100.97889  96.81305  98.65757  97.41645\n2013  97.71450  97.83142  99.87972  98.00971  97.79929\n2014  97.31577  98.13661  98.11314  98.29418  98.44762\n2015 102.69296 101.25406 100.79212 100.81966 101.35969\n2016 100.50886 100.41059  99.22155 100.85443 103.51476\n2017 103.73573 103.06287 105.35353 107.68154 106.72671\n2018 104.66875 103.82503 104.33960 105.55831 105.01264\n2019 102.37538 104.22067 106.22213 102.53491 102.81557\n2020  95.51304  97.48084  99.46319 100.67358 100.32336\n```\n:::\n\n```{.r .cell-code}\nggdemetra::seasonal(mod_x13, forecast = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2021 0.9240691 0.9625840 1.1283879 1.0116767 0.9542506 1.1122949 1.0301236\n           Aug       Sep       Oct       Nov       Dec\n2021 0.7736290 1.0661433 1.0421204 1.0454394 0.9628614\n```\n:::\n:::\n\nSi l'on veut une version plus rapide du code on peut également utiliser cette option :\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/unnamed-chunk-3_3c0ab397d08f3a12fde97aa3b7fbd992'}\n\n```{.r .cell-code}\nmod_jx13 <- jx13(y, x13_spec)\nsaisonnalite <- get_indicators(mod_jx13, c(\"s\", \"sa\", \"s_f\", \"y_f\"))\nsaisonnalite[[\"s\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2010 0.9479753 0.9734184 1.1314166 1.0194466 0.9149364 1.1040334 1.0253971\n2011 0.9486036 0.9738929 1.1146702 0.9990949 0.9435734 1.0943653 0.9971672\n2012 0.9744944 0.9952811 1.0894809 0.9994940 0.9609052 1.0773442 1.0308806\n2013 0.9881143 0.9734166 1.0586928 1.0414531 0.9661151 1.0343284 1.0633799\n2014 0.9887445 0.9708317 1.0618924 1.0340629 0.9456969 1.0716857 1.0449424\n2015 0.9611904 0.9664643 1.0947446 1.0268935 0.9248260 1.1112972 1.0452371\n2016 0.9336952 0.9939049 1.1148269 1.0091687 0.9628352 1.0902251 0.9872514\n2017 0.9643035 0.9598990 1.1181909 0.9641950 1.0015167 1.0999538 0.9910340\n2018 0.9940038 0.9589041 1.0890126 0.9941445 0.9936340 1.0782580 1.0244067\n2019 0.9762525 0.9595422 1.0576157 1.0265143 1.0011358 1.0398603 1.0629867\n2020 0.9768492 0.9563783 1.0931460 1.0048644 0.9500369 1.1224476 1.0549500\n           Aug       Sep       Oct       Nov       Dec\n2010 0.7473449 1.0778667 1.0402228 1.0450781 0.9908451\n2011 0.7725295 1.0855555 1.0436457 1.0336021 0.9645023\n2012 0.7668908 1.0190248 1.1114204 1.0328655 0.9392665\n2013 0.7511679 1.0558980 1.0943162 1.0101039 0.9672872\n2014 0.7347217 1.0923548 1.0977123 0.9715733 0.9995163\n2015 0.7410440 1.0774877 1.0685360 1.0097237 0.9855990\n2016 0.7929649 1.0745879 1.0421123 1.0381299 0.9631477\n2017 0.7846862 1.0498446 1.0744776 1.0308174 0.9322877\n2018 0.7891563 1.0084274 1.1117543 1.0382887 0.9294119\n2019 0.7697163 1.0458578 1.0967583 1.0142887 0.9512178\n2020 0.7506828 1.0740572 1.0727587 1.0092022 0.9628865\n```\n:::\n\n```{.r .cell-code}\nsaisonnalite[[\"sa\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2010  95.25565  95.64233  96.78133  98.48481 104.37885 101.26505  98.30338\n2011 104.36394 104.32359 103.43866 101.69204 116.68408  99.14422 101.28692\n2012 101.89900 100.37365 101.24088  99.85052 100.00987 100.71062 100.69062\n2013  97.45836  98.31350  98.13990  99.28435  99.57405 101.99855  98.92984\n2014  97.90194 100.01734  98.78591  99.51039  97.70572  97.78987  98.85712\n2015  98.41963  99.43461  99.01853  99.71823  98.39689 100.60315  96.72447\n2016 101.85337 100.21080  97.14512 102.36148 102.40590 101.17176  97.03709\n2017 102.56108 101.15647 102.39754 101.63919 102.54447 101.27698 100.40019\n2018 102.41410 102.82571 103.67189 103.60666  99.33235 104.61318 104.06023\n2019 106.32495 106.30070 105.52037 104.43109 105.08065 101.93677 103.29386\n2020 103.39364 104.66569  83.97780  66.37711  77.57594  87.48738  92.32665\n           Aug       Sep       Oct       Nov       Dec\n2010  99.68623 101.12568 100.93991  98.27017 102.84151\n2011 101.35535 101.33060 101.95031 102.84422 103.88777\n2012 102.75257 100.97889  96.81305  98.65757  97.41645\n2013  97.71450  97.83142  99.87972  98.00971  97.79929\n2014  97.31577  98.13661  98.11314  98.29418  98.44762\n2015 102.69296 101.25406 100.79212 100.81966 101.35969\n2016 100.50886 100.41059  99.22155 100.85443 103.51476\n2017 103.73573 103.06287 105.35353 107.68154 106.72671\n2018 104.66875 103.82503 104.33960 105.55831 105.01264\n2019 102.37538 104.22067 106.22213 102.53491 102.81557\n2020  95.51304  97.48084  99.46319 100.67358 100.32336\n```\n:::\n\n```{.r .cell-code}\nsaisonnalite[[\"s_f\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2021 0.9240691 0.9625840 1.1283879 1.0116767 0.9542506 1.1122949 1.0301236\n           Aug       Sep       Oct       Nov       Dec\n2021 0.7736290 1.0661433 1.0421204 1.0454394 0.9628614\n```\n:::\n\n```{.r .cell-code}\n# On a d'ailleurs directement une prévision de la série brute qui est faite par modèle ARIMA\nsaisonnalite[[\"y_f\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n2021  93.80530  98.83526 116.70635 105.64151  99.21541 117.25615 107.92506\n           Aug       Sep       Oct       Nov       Dec\n2021  81.39014 112.06948 110.18417 110.21518 101.77148\n```\n:::\n:::\n\nPour la fonction `tsCV()` on pourra utiliser la fonction suivante pour X-13\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/unnamed-chunk-4_0ff5f0e1acb29ed45fe5b575ff3d85eb'}\n\n```{.r .cell-code}\nfx13_stl <- function(x, h){\n\tmod_jx13 <- jx13(x, x13_spec)\n\tmod_jx13 <- get_indicators(mod_jx13, c(\"sa\", \"s_f\"))\n\tets_x13 <- ets(mod_jx13$sa, model = \"AAN\") # modèle fixé pour gagner du temps\n\tets_x13_f <- forecast(ets_x13, h = h)\n\tets_x13_f$mean <- ets_x13_f$mean * mod_jx13$s_f[1:h] # on ajoute 1:h pour éviter quelques bugs\n\tets_x13_f$model <- \"X-13 + ETS\"\n\t# Pas la peine d'actualiser autres paramètres\n\tets_x13_f\n}\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/AirPassengers-seas-stl-x13_c4b6ea09f9a711466259653e27d007ca'}\n\n```{.r .cell-code}\nlibrary(RJDemetra)\ny <- window(AirPassengers, end = end(AirPassengers) - c(1, 0))\nautoplot(y)\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/AirPassengers-seas-stl-x13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Saisonnalité présente qui dépend de la tendance : passage au log nécessaire pour STL\nmod_stl <- stl(log(y), s.window = \"periodic\")\n\nx13_spec <- x13_spec(easter.enabled = FALSE)\nmod_jx13 <- jx13(y, x13_spec)\nmod_jx13 <- get_indicators(mod_jx13, c(\"s\", \"sa\", \"s_f\", \"y_f\"))\nautoplot(exp(seasadj(mod_stl))) + \n\tautolayer(mod_jx13$sa)\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/AirPassengers-seas-stl-x13-2.png){width=672}\n:::\n\n```{.r .cell-code}\nets_x13 <- ets(mod_jx13$sa)\nets_stl <- ets(seasadj(mod_stl))\nets_x13_f <- forecast(ets_x13, h = 12)\nets_stl_f <- forecast(ets_stl, h = 12)\nx13_f <- ets_x13_f$mean * mod_jx13$s_f # Il faut multiplier car schéma multiplicatif\nets_f <- ets_stl_f$mean + lag(seasonal(mod_stl), -12)\nets_f <- exp(ets_f)\n```\n:::\n\n\nOn aurait directement pu obtenir les résultats avec fonction `forecast::stlf()` :\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/AirPassengers-comp-prev_09eece3b827473c36514e244cf8e5cb6'}\n\n```{.r .cell-code}\nets_f - stlf(y, lambda = 0, h = 12, s.window = \"periodic\")$mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1960   0   0   0   0   0   0   0   0   0   0   0   0\n```\n:::\n\n```{.r .cell-code}\nest_direct <- ets(y)\nest_direct_bc <- ets(y, lambda = 0)\nautoplot(window(AirPassengers, start = end(AirPassengers) - c(1, 0)),\n\t\t y = \"AirPassengers\") +\n\tautolayer(x13_f, series = \"X-13 + ETS\") +\n\tautolayer(mod_jx13$y_f, series = \"X-13\")+ \n\tautolayer(ets_f, series = \"STL + ETS\")+ \n\tautolayer(forecast(est_direct, PI=FALSE, h =12), series = \"ETS(M,Ad,M)\")+ \n\tautolayer(forecast(est_direct_bc, PI=FALSE, h =12), series = \"ETS(A,N,A) sur log(AirPassengers)\")\n```\n\n::: {.cell-output-display}\n![](4_Lissage_Exponentiel_files/figure-html/AirPassengers-comp-prev-1.png){width=672}\n:::\n:::\n\nLes séries qui semblent avoir les meilleurs prévisions sont X-13 (modèle ARIMA, voir TP 5) et X-13 + ETS. \nLe moins bon semble l'ETS directement calculé.\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/unnamed-chunk-5_3316ed226a3d6ca9164fd04733b9d160'}\n\n```{.r .cell-code}\nfx13_stl <- function(x, h){\n\tmod_jx13 <- jx13(x, x13_spec)\n\tmod_jx13 <- get_indicators(mod_jx13, c(\"sa\", \"s_f\"))\n\tets_x13 <- ets(mod_jx13$sa, model = \"AAN\") # modèle fixé pour gagner du temps\n\tets_x13_f <- forecast(ets_x13, h = h)\n\tets_x13_f$mean <- ets_x13_f$mean * mod_jx13$s_f[1:h] # on ajoute 1:h pour éviter quelques bugs\n\tets_x13_f$model <- \"X-13 + ETS\"\n\t# Pas la peine d'actualiser autres paramètres\n\t# ets_x13_f$upper = ets_x13_f$upper * mod_jx13$s_f\n\t# ets_x13_f$lower = ets_x13_f$lower * mod_jx13$s_f\n\tets_x13_f\n}\nfx13 <- function(x, h){\n\tmod_jx13 <- jx13(x, x13_spec)\n\tx13_f <- get_indicators(mod_jx13, c(\"y_f\"))$y_f\n\t## Ici il y a des calculs en trop car la prévision est uniquement faite avec le pré-ajustement, on pourrait encore optimiser en ne faisant que le pré-ajustement\n\t# mod_jx13 <- jregarima(y, x13_spec$regarima)\n\t# x13_f <- get_indicators(mod_jx13, c(\"model.y_f\"))[[1]]\n\tx13_f <- window(x13_f, end = time(x13_f)[h])\n\treturn(structure(list(method = \"X-13ARIMA\", \n\t\t\t\t\t\t  model = mod_jx13, \n\t\t\t\t\t\t  mean = x13_f,\n\t\t\t\t\t\t  level = NULL, \n\t\t\t\t\t\t  lower = NULL, upper = NULL, x = NULL, series = NULL, \n\t\t\t\t\t\t  fitted = NULL, residuals =NULL), class = \"forecast\"))\n}\nfstl_ets <- function(x, h){\n\tstlf(x, lambda = 0, h = 12, s.window = \"periodic\", etsmodel = \"AAN\")\n}\nfets <- function(x, h){\n\tforecast(ets(x, model = \"MAM\", damped = TRUE), h = h)\n}\nfets_bc <- function(x, h){\n\tforecast(ets(x, lambda = 0, model = \"AAA\"), h = h)\n}\n# On enlève les 3 premières années pour X-13\ne_x13_ets <- tsCV(AirPassengers, fx13_stl, h = 1, initial = 3*12)\ne_x13 <- tsCV(AirPassengers, fx13, h = 1, initial = 3*12)\ne_stl_est <- tsCV(AirPassengers, fstl_ets, h = 1, initial = 3*12)\ne_ets <- tsCV(AirPassengers, fets, h = 1, initial = 3*12)\ne_ets_bc <- tsCV(AirPassengers, fets_bc, h = 1, initial = 3*12)\n\nerreur <- ts.union(e_x13_ets, e_x13, e_stl_est,\n\t\t\t\t  e_ets, e_ets_bc)\ncolnames(erreur) <- c(\"X-13+ETS\", \"X-13\", \"STL+ETS\", \"ETS\", \"log(ETS)\")\n```\n:::\n\nLe modèle ARIMA (issu de X-13) semble de meilleure qualité :\n\n::: {.cell hash='4_Lissage_Exponentiel_cache/html/unnamed-chunk-6_f541b0b36e55edfecaee4ef5b1417fc4'}\n\n```{.r .cell-code}\ncolMeans(erreur^2, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nX-13+ETS     X-13  STL+ETS      ETS log(ETS) \n146.4192 140.2659 202.0902 206.2573 210.5955 \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}